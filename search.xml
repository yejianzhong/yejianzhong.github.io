<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[顺丰子单申请]]></title>
    <url>%2F2019%2F11%2F14%2F%E8%8E%B7%E5%8F%96%E9%A1%BA%E4%B8%B0%E5%AD%90%E5%8D%95%E5%8F%B7%E6%8E%A5%E5%8F%A3%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[顺丰子单申请 , wms客户端调用datahubWMS客户端配置的请求路径为 : http://IP+端口/datahubWeb/WMSSOAPCLIENT/EXPRESS_CLIENT ; 1、首先维护TM_BAS_CUSTOMER 表: a) DATAHUB_CUSTOMERID = EXPRESS_CLIENT ； 2、维护TM_STD_MESSAGELIST 表 ，新增2条记录 : a) MESSAGEID = SF_01； b) MESSAGEID = EXPRESS_T ; 3、维护TM_MESSAGELIST_CUSTOMER 表： 3.1 新增一条记录： i. DATAHUB_CUSTOMERID = EXPRESS_CLIENT ； ii. MESSAGEID = EXPRESS_T； iii. USER_PARAM1配置查询承运商的SQL语句； iv. USER_PARAM2维护承运商ID ； v. USER_PARAM3维护新的DATAHUB_CUSTOMERID = EXPRESS ; vi. USER_PARAM4维护新的MESSAGEID = SF_01 ; （若USER_PARAM2、USER_PARAM3、USER_PARAM4分别有多个，用’/’反斜杠隔开，但个数需一致） 3.2 根据承运商ID得到新的DATAHUB_CUSTOMERID和MESSAGEID后，再新增一条记录： i. DATDHUB_CUSTOMERID = EXPRESS ; ii. MESSAGEID = SF_01 ; iii. USER_CLASS配置自定义类的路径 ； iv. USER_PARAM1配置查询WMS数据库的语句 SQL1； v. USER_PARAM2配置cartonseqno (为SQL1的一个字段)， vi. cartonseqno 字段值等于1表示如果只有一箱，则直接把母单号更新到dropid字段中 ； vii. cartonseqno 字段值大于1，需要构造请求报文， viii. USER_PARAM3配置orderno ， ix. OUT_USER_MOTHED配置校验码 ， x. JNDI_NAME配置顺丰正式的请求地址：http://bsp-oisp.sf-express.com/bsp-oisp/ws/expressService?wsdl ； xi. OUT_USER_PARAM1配置表名A.字段名B，即 将顺丰返回的子单号更新到A表的B字段 ； 需维护两个DATAHUB_CUSTOMERID , 维护两个MESSAGEID ， TM_MESSAGELIST_CUSTOMER表需要维护两条记录； WMSSOAPCLIENT 可在WEB.XML中找到对应的类：datahub.adapter.services.webservices.ws.user.WMSTransferServlet ;]]></content>
      <categories>
        <category>DATAHUB</category>
      </categories>
      <tags>
        <tag>DATAHUB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[顺丰获取快递单号接口配置]]></title>
    <url>%2F2019%2F11%2F14%2F%E8%8E%B7%E5%8F%96%E9%A1%BA%E4%B8%B0%E5%BF%AB%E9%80%92%E5%8D%95%E5%8F%B7%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[本文说明顺丰获取快递单号配置 在标准的DATAHUB库已经有标准的配置，需要修改几个关键配置即可使用，DataHub_CustomerId=EXPRESS,Messageid=SF_MAILNO 检查WMS库是否有对应视图，视图名为：IDX_SFEXPRESS_GetOrder，如没有，按本文后的视图脚本录入（Oracle版本，MSSQL请自行修改）修改TM_MESSAGELIST_CUSTOMER表JNDI_NAME为顺丰接口调用地址，将字段为http://bsp-oisp.sf-express.com/bsp-oisp/ws/expressService?wsdl 一般原字段有固定地址内容为 (使用请修改):http://bsp-oisp.sf-express.com/bsp-oisp/ws/expressService 删除http前的字段即可 USER_PARAM5为顺丰提供给客户的客户卡号及检验码，客户卡号与检验码之前用”,”（逗号）分隔。OUT_USER_PARAM1为按顺序分别将快递单号，返回代码，返回描述这个三返回信息的记录位置，格式为表名.字段名，三个位置间以”/”分隔，如DOC_ORDER_HEADER.SOREFERENCE5/DOC_ORDER_HEADER.H_EDI_14/DOC_ORDER_HEADER.H_EDI_15 (注意：在维护的表名，这个表结构里必须要有orderno字段) 当该字段没有维护时，默认将订单号记录于Doc_Order_Header. SOReference5内，将返回代码记录于Doc_Order_Header.H_EDI_02内。 OUT_USER_PARAM2为处理标记记录位置，格式为表名.字段名，只能维护一个,如：DOC_ORDER_HEADER.H_EDI_12，当返回记录为OK时，标记为Y，当为非OK时，标记为W当该字段没有维护时，默认记录于Doc_Order_Header. H_EDI_04内。返回记录是否正确，都将记录为Y。 OUT_USER_PARAM3为处理时间记录位置格式为表名.字段名，只能维护一个,如：DOC_ORDER_HEADER.H_EDI_13，同时需要维护OUT_USER_PARAM4，维护值为Oracle或SQLServer(大小写可忽略)，用于写时间时取sysdate或getDate()。当该字段没有维护时，默认记录于Doc_Order_Header. EDISendTime4内。 视图脚本（Oracle）如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798CREATE OR REPLACE VIEW IDX_SFEXPRESS_GETORDER ASSELECT distinct c.orderno, c.orderno AS ORDERID, '1' AS EXPRESS_TYPE, '客户名称' AS J_COMPANY, '客户人' AS J_CONTACT, '客户电话' AS J_TEL, '客户地址' AS J_ADDRESS, nvl(F.DESCR_C, '无') AS D_COMPANY, case when d.ordertype in ('11', '10') then nvl(d.i_contact, '无') else nvl(F.CONTACT1, '无') end AS D_CONTACT, case when d.ordertype in ('11', '10') then nvl(d.i_tel1 || '-' || d.i_tel2, '无') else nvl(F.CONTACT1_TEL1 || '-' || F.CONTACT1_TEL2, '无') end AS D_TEL, case when d.ordertype in ('11', '10') then nvl(d.i_address1, '无') else nvl(F.ADDRESS1, '无') end AS D_ADDRESS, '1' AS PARCEL_QUANTITY, '1' AS PAY_METHOD, '客户省份' AS J_PROVINCE, '客户城市' AS J_CITY, F.PROVINCE AS D_PROVINCE, case when d.ordertype in ('11', '10') then nvl(d.i_city, '无') else d.c_city end AS D_CITY, '客户卡号(与TM_MESSAGELIST_CUSTOMER.USER_PARAM5的客户卡号一致)' as CUSTID, '' AS TEMPLATE, '' AS J_SHIPPERCODE, '' AS D_DELIVERYCODE, '' AS CARGO, SUM(C.QTY_EACH) AS CARGO_COUNT, '件' AS CARGO_UNIT, '1' AS CARGO_WEIGHT, '1' AS CARGO_AMOUNT, '1' AS CARGO_TOTAL_WEIGHT, SYSDATE AS SENDSTRATTIME, '' AS MAILNO, '' AS REMARK, '' as AddedServiceName1, '' as value, '' as value1, '' AddedServiceName2, '' value2, '' as value21 from act_allocation_details c left join doc_order_header d on d.orderno = c.orderno left join bas_customer f on f.customerid = d.consigneeid and f.customer_type = 'CO' where 1 = 1 and d.soreference5 IS NULL AND D.H_EDI_12 is null and substr(D.carrierid, 1, 1) = '1' and rownum &lt;= 100 GROUP BY c.orderno, c.orderno, c.cartonseqno, nvl(F.DESCR_C, '无'), case when d.ordertype in ('11', '10') then nvl(d.i_contact, '无') else nvl(F.CONTACT1, '无') end, case when d.ordertype in ('11', '10') then nvl(d.i_tel1 || '-' || d.i_tel2, '无') else nvl(F.CONTACT1_TEL1 || '-' || F.CONTACT1_TEL2, '无') end, case when d.ordertype in ('11', '10') then nvl(d.i_address1, '无') else nvl(F.ADDRESS1, '无') end, F.PROVINCE, case when d.ordertype in ('11', '10') then nvl(d.i_city, '无') else d.c_city end, SYSDATE; 标准配置涉及到的表: 1234567select * from TC_TIMER_CUSTOMERMESSAGEID where messageid='SF_MAILNO' and datahub_customerid='EXPRESS';select * from TM_MESSAGELIST_CUSTOMER where messageid='SF_MAILNO' and datahub_customerid='EXPRESS';select * from TM_MESSAGE_CUSTOMER_XML where messageid='SF_MAILNO' and datahub_customerid='EXPRESS';select * from TM_STD_MESSAGELIST where messageid='SF_MAILNO';]]></content>
      <categories>
        <category>DATAHUB</category>
      </categories>
      <tags>
        <tag>DATAHUB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在WSDL配置内添加新方法]]></title>
    <url>%2F2019%2F11%2F13%2F%E5%9C%A8WSDL%E9%85%8D%E7%BD%AE%E5%86%85%E6%B7%BB%E5%8A%A0%E6%96%B0%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[# 命名规则：以putData,及putDataResponse，比如要处理Location业务，我们可以命名为 putLocationData及putLocationResponse。因此在你想复制本文的基本配置前，你可以先将本文的原 方法基本字符（AsnSerialno）全部替换为你期望的方法名如：Location，再维护好表字段信息后即 可按以下节点路径复制到WSDL文件内即可。 关于字段信息，我们可以通过SQL查询获取，以便快捷及准确，查表结构用SQL（自行替换你需要查询OWNER及TableName） select ‘&lt;xs:element minOccurs=”0” name=”‘||a.COLUMN_NAME||’” type=”xs:string” /&gt;’ from all_tab_columns a where a.OWNER=’WMS_V431’ and a.TABLE_NAME=upper(‘doc_asn_serialno’) order by a.COLUMN_NAME; 同时关于字段信息内容的，不想显示的字段可以不配置到文件中。 *****操作前请先备份原WSDL文件，以名配置出错无法还原。** 在wsdl:typesxs:schema 之间添加信息12345678910111213141516171819202122232425&lt;xs:element name="putAsnSerialnoData" type="tns:putAsnSerialnoData" /&gt;&lt;xs:element name="putAsnSerialnoDataResponse" type="tns:putAsnSerialnoDataResponse" /&gt;&lt;xs:element name="wmsAsnSerialnoHeader" type="tns:wmsAsnSerialnoHeader" /&gt;&lt;xs:element name="wmsAsnSerialnoInfo" type="tns:wmsAsnSerialnoInfo" /&gt;&lt;xs:complexType name="putAsnSerialnoData"&gt;&lt;xs:sequence&gt;&lt;xs:element minOccurs="0" name="wmsSecurityInfo" type="tns:wmsSecurityInfo" /&gt;&lt;xs:element minOccurs="0" name="wmsAsnSerialnoInfo" type="tns:wmsAsnSerialnoInfo" /&gt;&lt;xs:element minOccurs="0" name="wmsParam" type="tns:wmsParamInfo" /&gt;&lt;/xs:sequence&gt;&lt;/xs:complexType&gt;&lt;xs:complexType name="wmsAsnSerialnoHeader"&gt;&lt;xs:sequence&gt; 在这里粘入刚才SQL查询到的表结构结果内容。 12345678910111213141516171819202122232425&lt;/xs:sequence&gt;&lt;/xs:complexType&gt;&lt;xs:complexType name="wmsAsnSerialnoInfo"&gt;&lt;xs:sequence&gt;&lt;xs:element maxOccurs="unbounded" minOccurs="0" name="wmsAsnSerialnoHeader" nillable="true" type="tns:wmsAsnSerialnoHeader" /&gt;&lt;xs:element minOccurs="0" name="wmsResultInfo" type="tns:wmsResultInfo" /&gt;&lt;/xs:sequence&gt;&lt;/xs:complexType&gt;&lt;xs:complexType name="putAsnSerialnoDataResponse"&gt;&lt;xs:sequence&gt;&lt;xs:element minOccurs="0" name="return" type="tns:wmsResultInfo" /&gt;&lt;/xs:sequence&gt;&lt;/xs:complexType&gt; 在新的位置，正文内添加下面内容123456789101112131415&lt;wsdl:message name="putAsnSerialnoData"&gt; &lt;wsdl:part element="tns:putAsnSerialnoData" name="parameters"&gt; &lt;/wsdl:part&gt;&lt;/wsdl:message&gt;&lt;wsdl:message name="putAsnSerialnoDataResponse"&gt; &lt;wsdl:part element="tns:putAsnSerialnoDataResponse" name="parameters"&gt; &lt;/wsdl:part&gt;&lt;/wsdl:message&gt; 在wsdl:portType之间添加下面内容1234567&lt;wsdl:operation name="putAsnSerialnoData"&gt; &lt;wsdl:input message="tns:putAsnSerialnoData" name="putAsnSerialnoData"&gt;&lt;/wsdl:input&gt; &lt;wsdl:output message="tns:putAsnSerialnoDataResponse" name="putAsnSerialnoDataResponse"&gt;&lt;/wsdl:output&gt;&lt;/wsdl:operation&gt; 在wsdl:binding之间添加下面内容1234567891011121314151617&lt;wsdl:operation name="putAsnSerialnoData"&gt; &lt;soap:operation soapAction="" style="document" /&gt; &lt;wsdl:input name="putAsnSerialnoData"&gt; &lt;soap:body use="literal" /&gt; &lt;/wsdl:input&gt; &lt;wsdl:output name="putAsnSerialnoDataResponse"&gt; &lt;soap:body use="literal" /&gt; &lt;/wsdl:output&gt;&lt;/wsdl:operation&gt; ​ ============================== WSDL间添加内容全部结束 ======================]]></content>
      <categories>
        <category>DATAHUB</category>
      </categories>
      <tags>
        <tag>DATAHUB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DATAHUB_TEST]]></title>
    <url>%2F2019%2F09%2F14%2FDATAHUB_TEST%2F</url>
    <content type="text"><![CDATA[DATAHUB新建文档测试DATAHUB问题记录：以下为代码块显示测试123456789101112memParam.clear(); memParam.add(MsgListCustStrCVal.ORGANIZATIONID, organizationId); memParam.add(MsgListCustStrCVal.DATAHUB_CUSTOMERID, datahubCustomerId); memParam.add(MsgListCustStrCVal.MESSAGEID, messageId); memParam.addNoIn(MsgListCustStrCVal.MESSAGETYPE, "H"); memParam.addNoIn(MsgListCustStrCVal.INOUT, "O"); BizComponent bizMsgType = MemConfigUtils.getInstance().getMsgConfig(MsgListCustStrCVal.CACHE_ID, memParam); List&lt;String&gt; detailStdTable = new ArrayList&lt;String&gt;(); for (RecordMap&lt;String, Object&gt; record : bizMsgType.getRecords()) &#123; detailStdTable.add(tableUtil.getStdTable(organizationId, datahubCustomerId, messageId, stdNo, record.getFieldValue(DatahubCommonCVal.MESSAGETYPE), messageGroupSysId)); &#125;]]></content>
      <categories>
        <category>DATAHUB_TEST</category>
      </categories>
      <tags>
        <tag>DATAHUB_TEST</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DATAHUB]]></title>
    <url>%2F2019%2F09%2F06%2FDATAHUB%2F</url>
    <content type="text"><![CDATA[DATAHUB DATAHUB问题记录： 以下为代码块显示测试 123456789101112memParam.clear(); memParam.add(MsgListCustStrCVal.ORGANIZATIONID, organizationId); memParam.add(MsgListCustStrCVal.DATAHUB_CUSTOMERID, datahubCustomerId); memParam.add(MsgListCustStrCVal.MESSAGEID, messageId); memParam.addNoIn(MsgListCustStrCVal.MESSAGETYPE, "H"); memParam.addNoIn(MsgListCustStrCVal.INOUT, "O"); BizComponent bizMsgType = MemConfigUtils.getInstance().getMsgConfig(MsgListCustStrCVal.CACHE_ID, memParam); List&lt;String&gt; detailStdTable = new ArrayList&lt;String&gt;(); for (RecordMap&lt;String, Object&gt; record : bizMsgType.getRecords()) &#123; detailStdTable.add(tableUtil.getStdTable(organizationId, datahubCustomerId, messageId, stdNo, record.getFieldValue(DatahubCommonCVal.MESSAGETYPE), messageGroupSysId)); &#125;]]></content>
      <categories>
        <category>DATAHUB</category>
      </categories>
      <tags>
        <tag>DATAHUB</tag>
      </tags>
  </entry>
</search>
